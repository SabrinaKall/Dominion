package client.gui.controller;


import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.util.Duration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import shared.domain.cards.Card;
import shared.domain.exceptions.InvalidCardTypeID;
import shared.dto.UserDTO;
import shared.util.AvailableActionCardIds;

import javax.swing.*;
import java.lang.invoke.MethodHandles;
import java.net.URL;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ResourceBundle;

/**
 * Controller for the window allowing action card selection
 */
@Controller
public class GameSettingsController extends FXMLControllerBase implements Initializable {

    /**
     * Logger
     */
    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());

    /**
     * retrieve customActionCards in lobby
     * @return customactioncards array
     */
    public int[] getCustomActionCards() {
        return customActionCards;
    }

    /**
     * ListView to multiselect actioncards to play with
     */
    @FXML
    public ListView lv_game_settings;

    /**
     * use default (random) actioncards or chosen ones.
     */
    @FXML
    public CheckBox check_box_random;

    /**
     * cancel setting up
     */
    @FXML
    public Button button_gamesettings_cancel;

    /**
     * save settings
     */
    @FXML
    public Button button_gamesettings_ok;

    int [] customActionCards;

    /**
     * Autowired constructor for the controller (generated by Spring)
     */
    @Autowired
    public GameSettingsController() {
        super("/fxml/GameSettings.fxml", "Game Settings");
    }


    public void run(){
        LOG.debug("opening gamesettings window");
        super.run();
    }




    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  {@code null} if the location is not known.
     * @param resources The resources used to localize the root object, or {@code null} if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {

        String tooltipText = "Please select exactly 10 Action Cards!";
        Tooltip tooltip = new Tooltip("Please select exactly 10 Action Cards!");
        tooltip.setShowDelay(new Duration(0));
        tooltip.setHideDelay(new Duration(Integer.MAX_VALUE));
        lv_game_settings.setTooltip(tooltip);

        ArrayList<String> listOfCardNames = new ArrayList<>();
        for (Integer i : AvailableActionCardIds.get()) {
            try {
                listOfCardNames.add(Card.fromID(i).getName());
            } catch (InvalidCardTypeID invalidCardTypeID) {
                LOG.error("init action cards",invalidCardTypeID);
            }
        }

        lv_game_settings.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        lv_game_settings.setItems(FXCollections.observableArrayList(listOfCardNames));

        // Listen to selection in ListView and set selection model to multiple
        lv_game_settings.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                Integer numberOfSelectedItems = lv_game_settings.getSelectionModel().getSelectedItems().size();


                LOG.info("No of selected items: " + numberOfSelectedItems);

                tooltip.setText(tooltipText+"\nItems selected: " + numberOfSelectedItems + ".");
                if(numberOfSelectedItems == 10)
                    button_gamesettings_ok.setDisable(false);
                else
                    button_gamesettings_ok.setDisable(true);
            }
        });


    }

    /**
     * user pressed checked or unchecked
     * checkbox
     * @param actionEvent event
     */
    @FXML
    public void checkboxRandomChanged(ActionEvent actionEvent) {
        LOG.info("GameSettings Window: User checked/unchecked checkbox to set randomized or customized actioncard set");
        if(check_box_random.isSelected()) {
            lv_game_settings.setDisable(true);
            button_gamesettings_ok.setDisable(false);
        }
        else {
            if (customActionCards == null)
                button_gamesettings_ok.setDisable(true);
            lv_game_settings.setDisable(false);
        }
    }

    /**
     * User pressed cancel button
     * @param actionEvent event
     */
    @FXML
    public void buttonGameSettingsCancelPressed(ActionEvent actionEvent) {
        LOG.info("GameSettings Window: User pressed cancel");
        if(customActionCards == null) {
            check_box_random.setSelected(true);
            lv_game_settings.setDisable(true);
            button_gamesettings_ok.setDisable(false);

        }
        Stage stage = (Stage) button_gamesettings_cancel.getScene().getWindow();
        stage.close();
    }

    /**
     * User pressed OK button
     * @param actionEvent button
     */
    @FXML
    public void buttonGameSettingsOkPressed(ActionEvent actionEvent) {
        LOG.info("GameSettings Window: User pressed OK");
        if(!check_box_random.isSelected()) {
            customActionCards = new int[10];
            ObservableList selectedIndices = lv_game_settings.getSelectionModel().getSelectedIndices();
            for (int i=0;i<10;i++) {
                customActionCards[i] = AvailableActionCardIds.get().get((Integer) selectedIndices.get(i));
            }
            LOG.info("Selected ActionCards: " + Arrays.toString(customActionCards));

        }
        else {
            customActionCards = null;
        }
        Stage stage = (Stage) button_gamesettings_ok.getScene().getWindow();
        stage.close();

    }

    /**
     * user selects items in listview
     * @param editEvent event
     */
    @FXML
    public void listViewOnAction(ListView.EditEvent editEvent) {
        LOG.info("User selects item " + editEvent.toString() + ".");

    }
}
