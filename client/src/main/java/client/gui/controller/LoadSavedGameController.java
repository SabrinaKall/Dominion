package client.gui.controller;

import client.gui.AlertWindow;
import client.gui.SoundEffects;
import client.service.ClientService;
import client.service.exception.ServerException;
import client.service.exception.ServiceException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.ListView;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import java.lang.invoke.MethodHandles;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.ResourceBundle;

/**
 * Controller for window showing saved games with these users
 */
@Controller
public class LoadSavedGameController extends FXMLControllerBase implements Initializable {

    /**
     * Logger
     */
    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());

    @FXML
    private ListView savedGameList;

    private List<Integer> savedGameIds;

    private final ClientService clientService;

    private SoundEffects soundEffects;

    /**
     * Autowired constructor for the controller (generated by Spring)
     */
    @Autowired
    public LoadSavedGameController(ClientService clientService, SoundEffects soundEffects) {
        super("/fxml/LoadSavedGame.fxml", "Saved Games");
        this.clientService = Objects.requireNonNull(clientService);
        savedGameIds = new ArrayList<>();
        this.soundEffects = Objects.requireNonNull(soundEffects);
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        LOG.info("Initialize loadSavedGame window");
        try {
            savedGameIds = clientService.loadGameIDs();
            ObservableList<Integer> gameIDs = FXCollections.observableArrayList(savedGameIds);
            savedGameList.setItems(gameIDs);
        } catch (ServerException e) {
            AlertWindow alert = new AlertWindow(Alert.AlertType.ERROR, "Game Select Error",
                "Problem loading game ids", "Sorry, please try again later");
            alert.showAndWait();
        }
    }

    public void run(){
        LOG.info("opening loadSavedGame window");
        super.run();
    }

    /**
     * Loads selected game
     */
    @FXML
    public void onLoadGameClicked() {
        List<Integer> selected = savedGameList.getSelectionModel().getSelectedItems();
        if(selected.size() != 1) {
            AlertWindow tooMany = new AlertWindow(Alert.AlertType.ERROR, "Game Select Error",
                "Wrong number of games selected", "You must select exactly one game");
            tooMany.showAndWait();
        }

        Integer selectedGameID = selected.get(0);
        try {
            hideWindow();
            soundEffects.playStartSound();
            clientService.loadSavedGameState(selectedGameID.intValue());
        } catch (ServiceException e) {
            AlertWindow errWindow = new AlertWindow(Alert.AlertType.ERROR, "Game Load Error",
                "Problem loading game", e.getMessage());
            errWindow.showAndWait();
        }

    }

}
