package shared.dto;

import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.time.LocalDate;
import java.util.HashSet;

/**
 * UserDTO model
 * @author Hannes
 */
public class UserDTO implements UserDetails {

    private static final long serialVersionUID = -9131140115431634194L;
    //private static final long serialVersionUID = 8926439328617797756L;
    /**
     * unique id, generated by db
     */
    private Integer id = -1;

    /**
     * UserDTO name
     */
    private String username = "";

    /**
     * registration date in epochday representation
     */

    private long registrationDate = 0L;


    private String password = "";


    /**
     *
     * @param username from database

     */
    public UserDTO(String username) {
        this.username = username;
    }


    public UserDTO() {}

    /**
     * constructor for adding a user
     * @param username username to be set
     */
    public UserDTO(Integer id, String username, String password) {
        this(username, password);
        this.id = id;
    }



    /**
     * constructor for adding a user
     * @param username username to be set
     */
    public UserDTO(String username, String password) {
        setUsername(username);
        setPassword(password);
        this.authorities = getAuthorities();
    }

    /**
     * constructor for adding a user
     * @param id the user's unique id
     * @param username username to be set
     */
    public UserDTO(Integer id, String username) {
        this.id = id;
        this.username = username;
    }


   //------------------Getter------------------

    /**
     *
     * @return the user's ID
     */
    public int getId() {
        return id.intValue();
    }

    /**
     *
     * @return the user's name
     */
    public String getUserName() {
        return username;
    }

    public LocalDate getRegistrationDateLocalDate() {
        return LocalDate.ofEpochDay(registrationDate);
    }

    public long getRegistrationDate() {
        return registrationDate;
    }

    //------------------hashCode & equals------------------

    /**
     *
     * @return the user's id
     */
    @Override
    public int hashCode() {
        return this.id.intValue();
    }

    /**
     * @return human readable format
     */
    @Override
    public String toString() {
        return "UserDTO{" +
            "id=" + id.intValue() +
            ", username='" + username + '\'' +
            '}';
    }

    /**
     *
     * @param o UserDTO object
     * @return true if this == o
     */
    @Override
    public boolean equals(Object o) {
        if (o == null || this.getClass() != o.getClass())  {
            return false;
        }

        UserDTO other = (UserDTO) o;
        return id.intValue() == other.id.intValue()
            && username.equals(other.username);

    }

    //------------------Setter------------------

    /**
     *
     * @param id ID to be set
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     *
     * @param username Username to be set
     */
    public void setUsername(String username) {
        this.username = username;
    }


    public void setPassword(String password) {
        this.password = password;
    }


    public void setRegistrationDate(long epochday) {
        registrationDate = epochday;
    }

    public void setRegistrationDate(LocalDate registrationDate) {
        this.registrationDate = registrationDate.toEpochDay();
    }


    private HashSet authorities;

    // mandatory userdetail methods
    @Override
    public HashSet<SimpleGrantedAuthority> getAuthorities() {
        HashSet<SimpleGrantedAuthority> setOfAuthorities = new HashSet<>();
        setOfAuthorities.add(new SimpleGrantedAuthority("DOMINIONPLAYER"));
        return setOfAuthorities;

    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public String getUsername() {
        return this.username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}
